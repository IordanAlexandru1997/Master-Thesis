name: Docker Build and Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: alexandru1997/my-spring-thesis:latest

    - name: Echo build result
      run: echo "Image pushed successfully to Docker Hub"

    - name: Deploy to server
      env:
        DEPLOY_SERVER: 141.26.157.78
        DEPLOY_USER: alex
        PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        PASSPHRASE: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}
      run: |
        # Install SSH client and expect tool
        sudo yum install -y openssh-clients expect

        # Write the SSH private key from secrets to a file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Start the ssh-agent
        eval $(ssh-agent -s)

        # Use expect script to automate passphrase input
        /usr/bin/expect <<EOD
        spawn ssh-add private_key.pem
        expect "Enter passphrase for private_key.pem:"
        send "$PASSPHRASE\r"
        expect eof
        EOD

        # Push Docker image to server and update the running container
        ssh -o "StrictHostKeyChecking=no" -i private_key.pem $DEPLOY_USER@$DEPLOY_SERVER <<EOL
        # Pull the latest Docker image
        docker pull alexandru1997/my-spring-thesis:latest

        # Stop the current running container (adjust if the container name is different)
        docker stop my-spring-app

        # Remove the old container
        docker rm my-spring-app

        # Start a new container using the latest image
        docker run -d -p 8080:8080 --name my-spring-app alexandru1997/my-spring-thesis:latest
        EOL

        # Clean up
        rm -f private_key.pem
