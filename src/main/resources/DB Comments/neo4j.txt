        // Adding SoBO objects : id between email and firstname "alex@gmail.comalex". own id between different properties
        // metadata on how the id is being formed (in a list): {id, email, firstname}. Merge operation also possible. without destroying the obj.
        // Performing benchmark only between java api and database servers.
        // 1. Create 1000 SoBO objects with 10 properties each.
        // 2. Updating 1000 SoBO objects with 10 properties each using id.
        // Creating a sequence of CRUD operations and performing them on each database. (Most operations would be an update with nothing to update)
        // Creation template: 100% of creates, 0% of updates, 0% of deletes, 0% of reads.
        // Update template. This could be a randomized sequence of operations. (CRUD). 90% of update ( 80% nothing happens,  10%or an actual update happens), 20% of deletes, 40% of creates, 10% of reads.
        // Reading template. 100% of reads, 0% of updates, 0% of deletes, 0% of creates.
        // Mixed template. 50% of reads, 20% of updates, 20% of creates, 10% of deletes.

In Neo4j, you typically interact with the database through Cypher queries. The native Java driver doesn't offer a direct object mapping like you have with OrientDB's OVertex, where you can directly manipulate vertices and edges as objects.

The snippet you provided for OrientDB takes advantage of OrientDB's native object handling, allowing you to fetch, update, and save vertices as if they were regular Java objects.

With Neo4j, the typical approach would involve writing a Cypher query to update the specific property of a node, as I previously provided in the update method for Neo4j. It's a more declarative approach, relying on the Cypher query language to specify what you want to be done, rather than manipulating objects directly.
//        Neo4jService neo4jService = context.getBean(Neo4jService.class);
//
//        SoBO sobo1 = new SoBO();
//        sobo1.addProperty("id", "1236");
//        sobo1.addProperty("name", "Bula Mariusoi");
//        sobo1.addProperty("email", "lapu@gmail.com");
//        neo4jService.addSoBO(sobo1, "id");
//
//        SoBO sobo2 = new SoBO();
//        sobo2.addProperty("id", "1235");
//        sobo2.addProperty("name", "Covrig Andreioi");
//        sobo2.addProperty("email", "mail@gmail.com");
//        neo4jService.addSoBO(sobo2, "id");
//
//        Map<String, Object> edgeProperties = new HashMap<>();
//        edgeProperties.put("some thing", "some value");
//        edgeProperties.put("property2", 42);
//        Edge edge = new Edge(sobo1, sobo2, "RELATED_TO", edgeProperties);
//
//        neo4jService.createEdge(edge, "id");\



    public void createRelationships(String employeeName, String projectName, double invoiceAmount) {
        try (Session session = driver.session()) {
            // Ensure Employee, Project, and Invoice nodes exist
            session.run("MERGE (e:Employee {name: $employeeName}) " +
                            "MERGE (p:Project {name: $projectName}) " +
                            "MERGE (i:Invoice {amount: $invoiceAmount})",
                    parameters("employeeName", employeeName,
                            "projectName", projectName,
                            "invoiceAmount", invoiceAmount));

            // Create relationships
            session.run("MATCH (e:Employee {name: $employeeName}), (p:Project {name: $projectName}), (i:Invoice {amount: $invoiceAmount}) " +
                            "MERGE (e)-[:WORKS_FOR]->(p) " +
                            "MERGE (e)-[:ISSUED]->(i)",
                    parameters("employeeName", employeeName,
                            "projectName", projectName,
                            "invoiceAmount", invoiceAmount));
        }
    }
    public void createRelationshipWithoutInvoice(String employeeName, String projectName) {
        try (Session session = driver.session()) {

            session.run("MERGE (e:Employee {name: $employeeName}) " +
                            "MERGE (p:Project {name: $projectName}) ",
                    parameters("employeeName", employeeName,
                            "projectName", projectName));

            // Create relationship
            session.run("MATCH (e:Employee {name: $employeeName}), (p:Project {name: $projectName})" +
                            "MERGE (e)-[:WORKS_FOR]->(p) ",
                    parameters("employeeName", employeeName,
                            "projectName", projectName));
        }
    }

    public List<Map<String, Object>> getEmployeeByName(String name) {
        try (Session session = driver.session()) {
            return session.run("MATCH (e:Employee {name: $name}) RETURN e", Map.of("name", name))
                    .list(r -> r.get("e").asMap());
        }
    }

    public void createEmployee(String name, double salary, String id, String department) {
        try (Session session = driver.session()) {
            String query = "CREATE (e:Employee {name: $name, salary: $salary, id: $id, department: $department})";
            session.run(query, parameters("name", name, "salary", salary, "id", id, "department", department));
        }
    }

    public void createInvoice(String id, String customer, double amount) {
        try (Session session = driver.session()) {
            String query = "CREATE (i:Invoice {id: $id, customer: $customer, amount: $amount})";
            session.run(query, parameters("id", id, "customer", customer, "amount", amount));
        }
    }

    public void createProject(String id, String name) {
        try (Session session = driver.session()) {
            session.run("CREATE (p:Project {id: $id, name: $name})",
                    Map.of("id", id, "name", name));
        }
    }

    public List<Map<String, Object>> getEmployee(String name) {
        try (Session session = driver.session()) {
            String query = "MATCH (e:Employee {name: $name}) RETURN e";
            return session.readTransaction(tx -> tx.run(query, parameters("name", name)).list(r -> r.get("e").asNode().asMap()));
        }
    }


    public List<Map<String, Object>> getInvoice(String id) {
        try (Session session = driver.session()) {
            String query = "MATCH (i:Invoice {id: $id}) RETURN i";
            return session.readTransaction(tx -> tx.run(query, parameters("id", id)).list(r -> r.get("e").asNode().asMap()));
        }
    }

    public List<Map<String, Object>> getProject(String id) {
        try (Session session = driver.session()) {
            return session.run("MATCH (p:Project {id: $id}) RETURN p", Map.of("id", id))
                    .list(r -> r.get("p").asMap());
        }
    }

    public List<Node> getEmployeesByName(String name) {
        List<Node> employees = new ArrayList<>();

        try (Session session = driver.session()) {

            String query = "MATCH (n:Employee) WHERE n.name = $name RETURN n";
            Result result = session.run(query, parameters("name", name));

            while (result.hasNext()) {
                Record record = result.next();
                employees.add(record.get("n").asNode());
            }
        }

        return employees;
    }
