        // Adding SoBO objects : id between email and firstname "alex@gmail.comalex". own id between different properties
        // metadata on how the id is being formed (in a list): {id, email, firstname}. Merge operation also possible. without destroying the obj.
        // Performing benchmark only between java api and database servers.
        // 1. Create 1000 SoBO objects with 10 properties each.
        // 2. Updating 1000 SoBO objects with 10 properties each using id.
        // Creating a sequence of CRUD operations and performing them on each database. (Most operations would be an update with nothing to update)
        // Creation template: 100% of creates, 0% of updates, 0% of deletes, 0% of reads.
        // Update template. This could be a randomized sequence of operations. (CRUD). 90% of update ( 80% nothing happens,  10%or an actual update happens), 20% of deletes, 40% of creates, 10% of reads.
        // Reading template. 100% of reads, 0% of updates, 0% of deletes, 0% of creates.
        // Mixed template. 50% of reads, 20% of updates, 20% of creates, 10% of deletes.


//        Neo4jService neo4jService = context.getBean(Neo4jService.class);
//
//        SoBO sobo1 = new SoBO();
//        sobo1.addProperty("id", "1236");
//        sobo1.addProperty("name", "Bula Mariusoi");
//        sobo1.addProperty("email", "lapu@gmail.com");
//        neo4jService.addSoBO(sobo1, "id");
//
//        SoBO sobo2 = new SoBO();
//        sobo2.addProperty("id", "1235");
//        sobo2.addProperty("name", "Covrig Andreioi");
//        sobo2.addProperty("email", "mail@gmail.com");
//        neo4jService.addSoBO(sobo2, "id");
//
//        Map<String, Object> edgeProperties = new HashMap<>();
//        edgeProperties.put("some thing", "some value");
//        edgeProperties.put("property2", 42);
//        Edge edge = new Edge(sobo1, sobo2, "RELATED_TO", edgeProperties);
//
//        neo4jService.createEdge(edge, "id");
